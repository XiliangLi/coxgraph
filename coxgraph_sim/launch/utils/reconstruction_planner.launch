<launch>
  <!-- Gazebo arguments -->
  <arg name="mav_name" default="firefly"/>
  <arg name="id" default="0"/>
  <arg name="verbose_gazebo" default="false"/>

  <!-- Voxblox arguments -->
  <arg name="voxel_size" default="0.10"/>
  <arg name="voxels_per_side" default="16"/>
  <arg name="ray_length" default="5.0"/>
  <arg name="method" default="merged"/>
  <arg name="verbose_voxblox" default="false"/>

  <!-- Unreal Routine arguments -->
  <arg name="uecv_mode" default="fast"/>
  <arg name="slowdown" default="0.0"/>
  <arg name="delay" default="3.0"/>

  <!-- Unreal Sensor arguments (ground_truth, kinect, gaussian_depth_noise)-->
  <arg name="model_type" default="gaussian_depth_noise"/>
  <arg name="flatten_distance" default="6.0"/>
  <arg name="maximum_distance" default="0.0"/>

  <!-- Odometry  arguments (random_walk, ground_truth)-->
  <arg name="use_vins" default="false"/>
  <arg name="odom_noise_model" default="random_walk"/>

  <!--  Planner arguments (can use a single config or compose the planner)-->
  <arg name="use_separate_configs" default="false"/>
  <arg name="planner_config" default="reconstruction_planner.yaml"/>
  <arg name="verbose_planner" default="true"/>
  <arg name="visualize" default="true"/>

  <!--  Experiment arguments -->
  <arg name="experiment_config" default="mp_ac26.yaml"/>
  <arg name="record_data" default="true"/>
  <arg name="record_visualization" default="true"/>
  <arg name="time_limit" default="30" />

  <arg name="enable_logging" default="false"/>
  <arg name="enable_ground_truth" default="true"/>
  <arg name="enable_gazebo_tf" default="false"/>
  <arg name="log_file" default="$(arg mav_name)"/>
  <arg name="run_gazebo_gui" default="true"/>
  <arg name="world" default="mp_ac26"/>

  <arg name="odom_topic" default="/$(arg mav_name)_$(arg id)/repub/odometry" unless="$(arg enable_gazebo_tf)" />
  <arg name="odom_topic" default="/$(arg mav_name)_$(arg id)/ground_truth/odometry" if="$(arg enable_gazebo_tf)"/>

  <!-- *** Experiment Execution *** -->
  <!-- Setup experiment params, data, nodes -->
  <rosparam command="load" file="$(find coxgraph_sim)/config/$(arg experiment_config)"/>

  <group ns="planner_$(arg id)">
    <!-- Planner -->
    <node name="planner_node" pkg="active_3d_planning_app_reconstruction" type="reconstruction_planner_node" output="screen" args="-alsologtostderr">
      <remap from="planner_node/tsdf_map_in" to="/tsdf_client/label_tsdf_client_$(arg id)/active_tsdf_out" />
      <remap from="planner_node/esdf_map_in" to="/tsdf_client/label_tsdf_client_$(arg id)/active_esdf_out" />
      <remap from="planner_node/optimized_tsdf_map_in" to="/coxgraph/coxgraph_client_$(arg id)/combined_tsdf_out" />
      <remap from="planner_node/optimized_esdf_map_in" to="/coxgraph/coxgraph_client_$(arg id)/combined_esdf_out" />
      <param name="client_number" value="2"/>
      <param name="client_id" value="$(arg id)"/>
      <remap from="planner_node/client_tsdf_map_in_0" to="/coxgraph/coxgraph_client_0/combined_tsdf_out"/>
      <remap from="planner_node/client_tsdf_map_in_1" to="/coxgraph/coxgraph_client_1/combined_tsdf_out"/>
      <remap from="planner_node/client_tsdf_map_in_2" to="/coxgraph/coxgraph_client_2/combined_tsdf_out"/>
      <remap from="planner_node/client_tsdf_map_in_3" to="/coxgraph/coxgraph_client_3/combined_tsdf_out"/>
      <param name="use_tf_transforms" value="false" />
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
      <param name="update_mesh_every_n_sec" value="0.0" />
      <param name="publish_traversable" value="true" />
      <param name="publish_slices" value="true" />
      <param name="publish_pointclouds_on_update" value="true" />
      <param name="world_frame" value="map_$(arg id)"/>
      <param name="baselink_frame" value="base_link"/>
      <param name="robot_namespace" value="$(arg mav_name)"/>

      <remap from="odometry" to="$(arg odom_topic)" />
      <remap from="command/trajectory" to="/$(arg mav_name)_$(arg id)/command/trajectory" />
      <param name="verbose" value="$(arg verbose_planner)" />
      <param name="visualize" value="$(arg visualize)" />
      <param name="log_performance" value="$(arg record_data)" />

      <!-- Experiment dependent -->
      <param name="trajectory_evaluator/bounding_volume_args" value="/target_bounding_volume" />
      <param name="trajectory_generator/bounding_volume_args" value="/map_bounding_volume" />

      <!-- Modular Config -->
      <rosparam command="load" file="$(find coxgraph_sim)/config/$(arg planner_config)"/>
    </node>

  </group>

  <!-- RVIZ Visualization -->
  <node type="rviz" name="rviz_experiment_$(arg id)" pkg="rviz" args="-d $(find coxgraph_sim)/config/rviz/experiment_visualization_client$(arg id).rviz" if="$(arg visualize)"/>
</launch>